//
//  ContentView.swift
//  XLIFF Localizer Testcases
//
//  Created by Leen van der Bent on 10/02/2024.
//

import SwiftUI

struct ContentView: View {
    let numberOfStringsDefaultCatalog = 3
    let totalStrings = 9
    let numberOfCatalogs = 2
    let deviceType = "iPhone"
    let fractionCorrect = 0.9999
    var body: some View {
        ZStack {
            Color.clear
                .ignoresSafeArea()
            VStack {
                logo
                helloDevelopers
                defaultValueInStringCatalogExample
                interpolationWithOnePluralization
                
                Divider()
                
                localizeableStringWithComment
                stringVaryByDevice
                twoPluralizationsWithVariables
                
                Divider()
                
                multiLineExample
                manuallyManagedKey
                interpolationWithFormattedNumber
                
                Spacer()
            }
            .padding()
        }
    }
    
    private var logo: some View {
        Image("prosults-studio-logo")
            .resizable()
            .scaledToFit()
            .frame(width: TestConstants.LOGO_SIZE)
    }
    
    //MARK: - default string catalog: no table value
    // key becomes (implicitly, hence light grey) default value (in base language) in string catalog
    private var helloDevelopers: some View {
        Text("Hello, developers!")
            .font(.headline)
            .padding(.bottom)
    }
    
    // default value manually changed in based language (English U.S. for this app) of string catalog
    private var defaultValueInStringCatalogExample: some View {
        Text("second_key")
            .font(.body)
            .padding(.bottom)
    }
    
    // explicit default value, different from key
    private var interpolationWithOnePluralization: some View {
        Text(
            LocalizedStringResource("interpolation_key",
                                     defaultValue: "There are \(numberOfStringsDefaultCatalog) strings in the default catalog.",
                                     comment: "mind the pluralization"
                                   )
        )
    }
    
    //MARK: - second string catalog: explicit table value specified
    // without a specific value in tableName, strings are generated in the Localizable string catalog
    // string catalogs are not generated by just using tableName property, but must be created first
    private var localizeableStringWithComment: some View {
        Text("A localizeable string in the second string catalog", 
             tableName: "SecondCatalog",
             comment: "translate with care")
            .padding(.bottom)
    }
    
    // see the separate lines for iPhone and iPad in the string catalog
    private var stringVaryByDevice: some View {
        Text("string_variant_per_device", 
             tableName: "SecondCatalog")
            .padding(.bottom)
    }
    
    // notice the two variables times two (English) up to four (Ukranian) pluralization rows
    private var twoPluralizationsWithVariables: some View {
        Text(
            LocalizedStringResource("multiple_interpolations_key_with_variables",
                                    defaultValue: "This test app has \(totalStrings) in \(numberOfCatalogs)",
                                    table: "SecondCatalog"
                                   )
        )
    }
    
    // known limitation in XLIFF String Catalog Localizer: multi-line keys do not import in Xcode
    // the app translates ok, but the resulting XML-structure is no longer matching expectations of Xcode
    // please apply below work-around: add a key which only consists of a single line
    private var multiLineExample: some View {
        Text(
            LocalizedStringResource("multi_line_key", defaultValue: """
                                     Multiline text for third string catalog.
                                     Second line starts here on this \(deviceType).
                                     And this is the third line.
                                     """,
                                     table: "SecondCatalog",
                                     comment: "multiline text for iOS app"
                                    )
        )
        .frame(maxWidth: .infinity, alignment: .leading)
        .padding(.vertical)
    }
    
    private var manuallyManagedKey: some View {
        Text("manual_key_2nd", tableName: "SecondCatalog", comment: "not automatically")
            .padding(.bottom)
    }
    
    private var interpolationWithFormattedNumber: some View {
        Text(
            LocalizedStringResource("lsr_formatted_interpolation_key",
                                    defaultValue: "You can expect \(fractionCorrect, format: .percent) of your localizable strings to be correctly translated via the XLIFF String Catalog Localizer app for macOS!",
                                    table: "SecondCatalog"
                                   )
        )
    }
    
}

fileprivate struct TestConstants {
    static let LOGO_SIZE: CGFloat = 80.0
}

#Preview("English") {
    ContentView()
        .environment(\.locale, Locale(identifier: "EN"))
}

#Preview("Chinese") {
    ContentView()
        .environment(\.locale, Locale(identifier: "ZH"))
}

#Preview("Dutch") {
    ContentView()
        .environment(\.locale, Locale(identifier: "NL"))
}

#Preview("German") {
    ContentView()
        .environment(\.locale, Locale(identifier: "DE"))
}

#Preview("Swedish") {
    ContentView()
        .environment(\.locale, Locale(identifier: "SV"))
}

#Preview("Ukrainian") {
    ContentView()
        .environment(\.locale, Locale(identifier: "UK"))
}
